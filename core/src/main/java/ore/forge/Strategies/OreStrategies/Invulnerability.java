package ore.forge.Strategies.OreStrategies;

import com.badlogic.gdx.utils.JsonValue;
import ore.forge.Ore;

//@author Nathan Ulmen
public class Invulnerability implements OreStrategy {
    private int charges;
    private float duration;

    public Invulnerability(int charges, float duration) {
        this.charges = charges;
        this.duration = duration;
    }


    public Invulnerability(Invulnerability clone) {
        this.charges = clone.charges;
        this.duration = clone.duration;
    }

    public Invulnerability(JsonValue jsonValue) {
        charges = jsonValue.getInt("charges");
        duration = jsonValue.getFloat("duration");
    }


    @Override
    public void activate(float deltaT, Ore ore) {
        duration -= deltaT;
        if(charges > 0 && duration >= 0 && ore.isDoomed()) {
            ore.setIsDying(false);
            charges--;
        }
        if (charges <= 0 || duration <= 0) {
            ore.removeEffect(this);
        }
    }

    @Override
    public OreStrategy clone() {
        try {
            return (OreStrategy) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public boolean isEndStepEffect() {
        return true;
    }

    @Override
    public String toString() {
        return this.getClass().getSimpleName() + "\tCharges: " + charges + "\tDuration: " + duration;
    }

    public static OreStrategy createFromJson(JsonValue jsonValue) {
        return new Invulnerability(jsonValue.getInt("charges"), jsonValue.getFloat("duration"));
    }

}
